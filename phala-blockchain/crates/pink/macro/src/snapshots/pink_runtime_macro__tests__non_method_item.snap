---
source: crates/pink/macro/src/tests.rs
assertion_line: 57
expression: "rustfmt_snippet::rustfmt_token_stream(&stream).unwrap()"
---
pub trait ECalls {
    type Foo;
    fn foo(&self);
}
impl<T: Impl + CrossCallMut> ECalls for T {
    fn foo(&self) {
        let inputs = ();
        let ret = self.cross_call(1, &inputs.encode());
        Decode::decode(&mut &ret[..]).expect("Decode failed")
    }
}
pub trait ECallsRo {
    fn foo(&self);
}
impl<T: Impl> ECallsRo for T {
    fn foo(&self) {
        let inputs = ();
        let ret = self.cross_call(1, &inputs.encode());
        Decode::decode(&mut &ret[..]).expect("Decode failed")
    }
}
pub fn dispatch(
    executor: &mut (impl Executing + ?Sized),
    srv: &mut (impl ECalls + ?Sized),
    id: u32,
    input: &[u8],
) -> Vec<u8> {
    match id {
        1 => {
            let () = Decode::decode(&mut &input[..]).expect("Failed to decode args");
            executor.execute(move || srv.foo()).encode()
        }
        _ => panic!("Unknown call id {}", id),
    }
}
pub fn id2name(id: u32) -> &'static str {
    match id {
        1u32 => "foo",
        _ => "unknown",
    }
}
pub struct ECallsAvailable;
impl ECallsAvailable {
    pub fn foo(version: (u32, u32)) -> bool {
        version >= (1u32, 0u32)
    }
}

